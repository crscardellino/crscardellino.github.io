<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Cristian Cardellino]]></title>
  <link href="http://crscardellino.me/blog/atom.xml" rel="self"/>
  <link href="http://crscardellino.me/blog/"/>
  <updated>2014-08-26T20:02:44+02:00</updated>
  <id>http://crscardellino.me/blog/</id>
  <author>
    <name><![CDATA[Cristian Cardellino]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[From Python to Scala (VII): Functions (II)]]></title>
    <link href="http://crscardellino.me/blog/post/2014/08/26/from-python-to-scala-vii-functions-ii/"/>
    <updated>2014-08-26T20:05:00+02:00</updated>
    <id>http://crscardellino.me/blog/post/2014/08/26/from-python-to-scala-vii-functions-ii</id>
    <content type="html"><![CDATA[<p>Hello again! Nice to see you decided to come back. If you check my
<a href="http://crscardellino.me/blog/post/2014/08/23/from-python-to-scala-vi-functions/">previous post</a>
you know that functions are quite an important matter in the Scala
language.</p>

<p>Last time, talking about recursion, I wasn&rsquo;t able to cover all the topics about
functions. So I decided to dedicate yet another post to it. You can call it
&ldquo;advanced functions&rdquo;, but I don&rsquo;t think is so &ldquo;advance&rdquo; what I&rsquo;m going to show
here.</p>

<p>So, you are welcome to read some more on functions in this new blog post.</p>

<h3>Arguments</h3>

<h4>Default Values</h4>

<p>Ok, following the <a href="https://docs.python.org/2/tutorial/">Python Tutorial</a>, I&rsquo;ll
talk a little about this.</p>

<p>Default argument values in Scala are very similar to Python&rsquo;s. With the
difference being in the static types, that is, you&rsquo;ll have to explicit declare
the type of the argument:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">def</span> <span class="n">foo</span><span class="o">(</span><span class="n">x</span><span class="k">:</span> <span class="kt">Int</span><span class="o">,</span> <span class="n">y</span><span class="k">:</span> <span class="kt">Int</span> <span class="o">=</span> <span class="mi">0</span><span class="o">,</span> <span class="n">z</span><span class="k">:</span> <span class="kt">Int</span> <span class="o">=</span> <span class="mi">1</span><span class="o">)</span><span class="k">:</span> <span class="kt">Int</span> <span class="o">=</span> <span class="o">(</span><span class="n">x</span> <span class="o">+</span> <span class="n">y</span><span class="o">)</span> <span class="o">*</span> <span class="n">z</span>
</span><span class='line'>
</span><span class='line'><span class="n">foo</span><span class="o">(</span><span class="mi">10</span><span class="o">)</span> <span class="c1">// Returns 10</span>
</span><span class='line'>
</span><span class='line'><span class="n">foo</span><span class="o">(</span><span class="mi">10</span><span class="o">,</span> <span class="mi">10</span><span class="o">)</span> <span class="c1">// Returns 20</span>
</span><span class='line'>
</span><span class='line'><span class="n">foo</span><span class="o">(</span><span class="mi">10</span><span class="o">,</span> <span class="mi">10</span><span class="o">,</span> <span class="mi">2</span><span class="o">)</span> <span class="c1">// Returns 40</span>
</span><span class='line'>
</span><span class='line'><span class="n">foo</span><span class="o">(</span><span class="mi">10</span><span class="o">,</span> <span class="n">z</span> <span class="k">=</span> <span class="mi">2</span><span class="o">)</span> <span class="c1">// Returns 20</span>
</span><span class='line'>
</span><span class='line'><span class="n">foo</span><span class="o">(</span><span class="mi">10</span><span class="o">,</span> <span class="n">z</span> <span class="k">=</span> <span class="mi">2</span><span class="o">,</span> <span class="n">y</span> <span class="k">=</span> <span class="mi">10</span><span class="o">)</span> <span class="c1">// Returns 40</span>
</span><span class='line'>
</span><span class='line'><span class="n">foo</span><span class="o">(</span><span class="mi">10</span><span class="o">,</span> <span class="mi">10</span><span class="o">,</span> <span class="n">y</span> <span class="k">=</span> <span class="mi">10</span><span class="o">)</span> <span class="c1">// Error! The parameter `y` has already been specified</span>
</span></code></pre></td></tr></table></div></figure>


<p>As you can see, there is no problem in how to send the arguments, but if you
don&rsquo;t explicitly tell what parameter you are passing, it will use the order to
define the assignments.</p>

<!-- more -->


<p>In Scala you don&rsquo;t even have to declare all the parameters with default
arguments at the end (like in Python), but it&rsquo;s a good practice as otherwise
you&rsquo;ll face with problems:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">def</span> <span class="n">foo</span><span class="o">(</span><span class="n">x</span><span class="k">:</span> <span class="kt">Int</span><span class="o">,</span> <span class="n">y</span><span class="k">:</span> <span class="kt">Int</span> <span class="o">=</span> <span class="mi">0</span><span class="o">,</span> <span class="n">z</span><span class="k">:</span> <span class="kt">Int</span><span class="o">)</span><span class="k">:</span> <span class="kt">Int</span> <span class="o">=</span> <span class="o">(</span><span class="n">x</span> <span class="o">+</span> <span class="n">y</span><span class="o">)</span> <span class="o">*</span> <span class="n">z</span> <span class="c1">// Valid!</span>
</span><span class='line'>
</span><span class='line'><span class="n">foo</span><span class="o">(</span><span class="mi">10</span><span class="o">)</span> <span class="c1">// Wrong, `z` has no value</span>
</span><span class='line'>
</span><span class='line'><span class="n">foo</span><span class="o">(</span><span class="mi">10</span><span class="o">,</span> <span class="mi">15</span><span class="o">)</span> <span class="c1">// Wrong, 15 is assigned to `y` not `z`. `z` still has no value</span>
</span><span class='line'>
</span><span class='line'><span class="n">foo</span><span class="o">(</span><span class="mi">10</span><span class="o">,</span> <span class="n">z</span> <span class="k">=</span> <span class="mi">2</span><span class="o">)</span> <span class="c1">// Returns 20</span>
</span></code></pre></td></tr></table></div></figure>


<p>You see? In this version of foo, you have to explicit declare z as a passed
parameter, otherwise you get an error. That&rsquo;s why it&rsquo;s good practice to keep
all arguments with default values in the end.</p>

<p>Of course, as parameters have a type, you have to give the a default value of
that type (or with an implicit conversion to that type), otherwise is an error:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">def</span> <span class="n">foo</span><span class="o">(</span><span class="n">x</span><span class="k">:</span> <span class="kt">Int</span><span class="o">,</span> <span class="n">y</span><span class="k">:</span> <span class="kt">Int</span> <span class="o">=</span> <span class="mi">0</span><span class="o">,</span> <span class="n">z</span><span class="k">:</span> <span class="kt">Double</span> <span class="o">=</span> <span class="mi">0</span><span class="o">)</span> <span class="k">=</span> <span class="o">{</span> <span class="o">(</span><span class="n">x</span> <span class="o">+</span> <span class="n">y</span><span class="o">)</span> <span class="o">*</span> <span class="n">z</span><span class="o">}</span> <span class="c1">// Valid. `0` is an Int with implicit conversion to Double</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="n">bar</span><span class="o">(</span><span class="n">x</span><span class="k">:</span> <span class="kt">Int</span><span class="o">,</span> <span class="n">y</span><span class="k">:</span> <span class="kt">Int</span> <span class="o">=</span> <span class="mi">0</span><span class="o">,</span> <span class="n">z</span><span class="k">:</span> <span class="kt">Double</span> <span class="o">=</span> <span class="kc">null</span><span class="o">)</span> <span class="k">=</span> <span class="o">{</span> <span class="o">(</span><span class="n">x</span> <span class="o">+</span> <span class="n">y</span><span class="o">)</span> <span class="o">*</span> <span class="n">z</span><span class="o">}</span> <span class="c1">// Invalid. `null` has no implicit conversion to Double</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now, on the last code I introduce a new value I don&rsquo;t think I talked about it
before: <strong>null</strong>. The value <strong>null</strong> is similar to the value <strong>None</strong> in
Python. It&rsquo;s specially useful to use it on a variable of a particular class
when you don&rsquo;t want to instantiate that class just yet (for example a class
defined by you). You can use on some variables of Scala types such as String or
List, but not in a primitive type (Int, Double, Char, etc.). We&rsquo;ll talk more
about it when we start working on classes. For now I just wanted to make a
quick warning: do not use the (also) reserved word in Scala of <strong>None</strong> as the
value <strong>null</strong>. It&rsquo;s not the same, None is a value of a special Scala type
called <strong>Option</strong>, that we&rsquo;ll discuss in further posts.</p>

<blockquote><p>Do not use the (also) reserved word in Scala of `None` as the value `null`.</p></blockquote>


<h4>Arbitrary List</h4>

<p>In Scala, as in Python, you can pass an argument representing an arbitrary list
of arguments. This argument always has to be defined as the last one and is
treated as a list of elements of the defined type (you cannot have a list of
types of mixed values):</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">def</span> <span class="n">sum</span><span class="o">(</span><span class="n">args</span><span class="k">:</span> <span class="kt">Int*</span><span class="o">)</span> <span class="k">=</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">var</span> <span class="n">x</span> <span class="k">=</span> <span class="mi">0</span>
</span><span class='line'>  <span class="k">for</span><span class="o">(</span><span class="n">arg</span> <span class="k">&lt;-</span> <span class="n">args</span><span class="o">)</span> <span class="n">x</span> <span class="o">+=</span> <span class="n">arg</span>
</span><span class='line'>  <span class="n">x</span>
</span><span class='line'><span class="o">}</span> <span class="c1">// Return the sum of all the parameters</span>
</span><span class='line'>
</span><span class='line'><span class="n">sum</span><span class="o">(</span><span class="mi">1</span><span class="o">)</span> <span class="c1">// returns 1</span>
</span><span class='line'>
</span><span class='line'><span class="n">sum</span><span class="o">(</span><span class="mi">1</span><span class="o">,</span> <span class="mi">2</span><span class="o">)</span> <span class="c1">// return 3</span>
</span><span class='line'>
</span><span class='line'><span class="n">sum</span><span class="o">(</span><span class="mi">1</span><span class="o">,</span> <span class="mi">10</span><span class="o">,</span> <span class="mi">100</span><span class="o">,</span> <span class="mi">1000</span><span class="o">)</span> <span class="c1">// returns 1111</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now, Scala does not have an equivalent to Python&rsquo;s <em>**kwargs</em>. There are some
workarounds you can do, but I don&rsquo;t think it&rsquo;s useful for me to get deep into
that.</p>

<h3>Lambda expressions (a.k.a. anonymous functions)</h3>

<p>Well, anonymous functions, such a powerful and useful tool in Scala (when you
start with them, you end up using them everywhere). Anonymous functions are
<em>the tool</em> that makes a functional programming language. These are core concept
in the paradigm, so obviously I won&rsquo;t be able to explain it well enough.
Instead, I&rsquo;ll take the example in the Python tutorial, and show how it is done
in Scala. Then again, you&rsquo;ll have to learn more on anonymous functions on your
own, as it&rsquo;s not the idea of my tutorial to teach more than the basics that
helps a Python programmer enter in the Scala world.</p>

<blockquote><p>Anonymous functions are the tool that makes a functional programming language.</p></blockquote>


<p>Ok, so, let&rsquo;s show you the Python example of use of a lambda expression, they
create a function which returns a function:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="k">def</span> <span class="nf">make_incrementor</span><span class="p">(</span><span class="n">n</span><span class="p">):</span>
</span><span class='line'><span class="o">...</span>     <span class="k">return</span> <span class="k">lambda</span> <span class="n">x</span><span class="p">:</span> <span class="n">x</span> <span class="o">+</span> <span class="n">n</span>
</span><span class='line'><span class="o">...</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">f</span> <span class="o">=</span> <span class="n">make_incrementor</span><span class="p">(</span><span class="mi">42</span><span class="p">)</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">f</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
</span><span class='line'><span class="mi">42</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">f</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'><span class="mi">43</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now, in this example, you create a lambda expression using the <strong>lambda</strong>
reserved word. In Scala the code is quite similar, but you don&rsquo;t need an extra
expression:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">def</span> <span class="n">make_incrementor</span><span class="o">(</span><span class="n">n</span><span class="k">:</span> <span class="kt">Int</span><span class="o">)</span> <span class="k">=</span> <span class="o">(</span><span class="n">x</span><span class="k">:</span> <span class="kt">Int</span><span class="o">)</span> <span class="k">=&gt;</span> <span class="n">x</span> <span class="o">+</span> <span class="n">n</span>
</span><span class='line'>
</span><span class='line'><span class="k">val</span> <span class="n">f</span> <span class="k">=</span> <span class="n">make_incrementor</span><span class="o">(</span><span class="mi">42</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">f</span><span class="o">(</span><span class="mi">0</span><span class="o">)</span> <span class="c1">// Returns 42</span>
</span><span class='line'>
</span><span class='line'><span class="n">f</span><span class="o">(</span><span class="mi">1</span><span class="o">)</span> <span class="c1">// Returns 43</span>
</span></code></pre></td></tr></table></div></figure>


<p>Pay attention to the returned value by the function <em>make_incrementor</em>:
<em>(x:Int) => x + n</em>. This is the definition of an anonymous function, basically
a function with it&rsquo;s parameters, no name and a => operator instead of a =
operator.</p>

<p>This functions can have as many parameters as you want and you can directly
apply them without making necessary to assign them to a value or variable:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="o">(</span><span class="n">x</span><span class="k">:</span> <span class="kt">Int</span><span class="o">,</span> <span class="n">y</span><span class="k">:</span> <span class="kt">Int</span><span class="o">)</span> <span class="k">=&gt;</span> <span class="n">x</span> <span class="o">+</span> <span class="n">y</span>
</span><span class='line'>
</span><span class='line'><span class="o">()</span> <span class="k">=&gt;</span> <span class="n">println</span><span class="o">(</span><span class="s">&quot;Hello, world&quot;</span><span class="o">)</span> <span class="c1">// Anonymous function with zero parameter</span>
</span><span class='line'>
</span><span class='line'><span class="o">((</span><span class="n">x</span><span class="k">:</span> <span class="kt">Int</span><span class="o">)</span> <span class="k">=&gt;</span> <span class="n">x</span> <span class="o">*</span> <span class="mi">2</span><span class="o">)(</span><span class="mi">20</span><span class="o">)</span> <span class="c1">// Applies the anonymous function and returns 40</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now, of course, as everything in Scala, functions have types, and sometimes you
may need to explicit declare a function type. This can happen, for example, if
you are declaring a recursive function with a return value of an anonymous
function; however, the function type declaration is fundamental when having a
function&rsquo;s parameter taking a function. This is called
<a href="http://en.wikipedia.org/wiki/Higher-order_programming">higher-order programming</a>
and is a topic for another post (a whole post in fact), it&rsquo;s another of the
core features of functional programming.</p>

<p>For now, you only need to now that the type of a function is defined by the
type of its parameters and the returning type:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">val</span> <span class="n">foo</span><span class="k">:</span> <span class="kt">Int</span> <span class="o">=&gt;</span> <span class="nc">Int</span> <span class="k">=</span> <span class="o">(</span><span class="n">x</span><span class="k">:</span> <span class="kt">Int</span><span class="o">)</span> <span class="k">=&gt;</span> <span class="n">x</span> <span class="o">+</span> <span class="mi">50</span> <span class="c1">// Equivalent to: def foo(x: Int): Int = x + 50</span>
</span><span class='line'>
</span><span class='line'><span class="n">foo</span><span class="o">(</span><span class="mi">5</span><span class="o">)</span> <span class="c1">// Returns 50</span>
</span><span class='line'>
</span><span class='line'><span class="k">val</span> <span class="n">bar</span><span class="k">:</span> <span class="o">()</span> <span class="o">=&gt;</span> <span class="nc">Int</span> <span class="k">=</span> <span class="o">()</span> <span class="k">=&gt;</span> <span class="mi">20</span> <span class="c1">// Equivalent to def b(): Int = 20</span>
</span><span class='line'>
</span><span class='line'><span class="n">bar</span><span class="o">()</span> <span class="c1">// Returns 20</span>
</span><span class='line'>
</span><span class='line'><span class="k">val</span> <span class="n">baz</span><span class="k">:</span> <span class="o">(</span><span class="kt">Int</span><span class="o">,</span> <span class="kt">Int</span><span class="o">)</span> <span class="k">=&gt;</span> <span class="nc">Int</span> <span class="k">=</span> <span class="o">(</span><span class="n">x</span><span class="k">:</span> <span class="kt">Int</span><span class="o">,</span> <span class="n">y</span><span class="k">:</span> <span class="kt">Int</span><span class="o">)</span> <span class="k">=&gt;</span> <span class="n">x</span> <span class="o">+</span> <span class="n">y</span> <span class="c1">// Equivalent to def baz(x: Int, y: Int): Int = x + y</span>
</span><span class='line'>
</span><span class='line'><span class="n">baz</span><span class="o">(</span><span class="mi">2</span><span class="o">,</span> <span class="mi">3</span><span class="o">)</span> <span class="c1">// Returns 5</span>
</span></code></pre></td></tr></table></div></figure>


<p>As you see, sometimes the parentheses are not mandatory when the function only
takes one parameter but it is obligatory in any other case.</p>

<p>Of course, this examples are very simple and don&rsquo;t really show the power of
anonymous functions nor even why sometimes is necessary to explicit the type.
This, hopefully, will come later and you&rsquo;ll understand the importance of it in
a functional programming language like Scala.</p>

<p>So, I think is now time to finish this post. As always, I&rsquo;ll be thankful on
your comments. Best regards and until the next part!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[From Python to Scala (VI): Functions]]></title>
    <link href="http://crscardellino.me/blog/post/2014/08/23/from-python-to-scala-vi-functions/"/>
    <updated>2014-08-23T20:30:00+02:00</updated>
    <id>http://crscardellino.me/blog/post/2014/08/23/from-python-to-scala-vi-functions</id>
    <content type="html"><![CDATA[<p>Welcome to another post on my series of tutorials. As you can see (if you were
following my tutorials since I started them), I change the environment of my
blog, using Octopress to facilitate the blog writing (it has very nice features
such as the automatic categories and blog archive).</p>

<p>This time we will exploring one of the most powerful things Scala offers as a
functional programming language. That is, of course, the functions, the core
concept in this paradigm.</p>

<p>This concept is quite important, and I&rsquo;m sure I won&rsquo;t be able to explain the
full potential of Scala functions as I&rsquo;m not a master in functional programming
paradigm. Yet, I&rsquo;ll do my best. However, it is important that you take a
tutorial or course on Scala&rsquo;s functional programming (I deeply recommend Martin Odersky&rsquo;s
<a href="https://www.coursera.org/course/progfun">Functional Programming Principles in Scala</a>).</p>

<h3>Functions Basics</h3>

<p>Scala functions are declared using the same reserved word that Python uses:
<strong>def</strong>. Like all Scala&rsquo;s control flow instructions, the scope of the function
is defined either by the immediate next instruction or by a block closed
between curly braces: <strong>{</strong> and <strong>}</strong>.</p>

<blockquote><p>I won&#8217;t be able to explain the full potential of Scala functions as I&#8217;m not a<br/>master in functional programming paradigm. Yet, I&#8217;ll do my best.</p></blockquote>


<p>Functions in Scala are actually values assigned to a symbol (just like a
<strong>val</strong> or a <strong>var</strong>), so naturally they have a type. The type of a function is
defined as a list of parameters of some type returning a parameter of some type
(can be the same, can be different). In basic terms, this means that every
parameter of a function should have an explicit type (the system cannot infer
the type on its own and will throw an error if you don&rsquo;t declare it). But, they
can have an implicit returning type that the system can infer:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">def</span> <span class="n">add</span><span class="o">(</span><span class="n">x</span><span class="k">:</span> <span class="kt">Int</span><span class="o">,</span> <span class="n">y</span><span class="k">:</span> <span class="kt">Int</span><span class="o">)</span><span class="k">:</span> <span class="kt">Int</span> <span class="o">=</span> <span class="n">x</span> <span class="o">+</span> <span class="n">y</span> <span class="c1">// All good!</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="n">pow2</span><span class="o">(</span><span class="n">x</span><span class="k">:</span> <span class="kt">Int</span><span class="o">)</span> <span class="k">=</span> <span class="n">x</span> <span class="o">*</span> <span class="n">x</span> <span class="c1">// Correct again. The system infer the returning type as Int</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="n">substract</span><span class="o">(</span><span class="n">x</span><span class="o">,</span> <span class="n">y</span><span class="o">)</span> <span class="k">=</span> <span class="n">x</span> <span class="o">-</span> <span class="n">y</span> <span class="c1">// Wrong. The system doesn&#39;t know the type of x and y</span>
</span></code></pre></td></tr></table></div></figure>




<!-- more -->


<p>Pay attention in my last code. Every function define is followed by an equality
sign (<strong>=</strong>) and neither of them needed the <strong>return</strong> reserved word.</p>

<p>The equality sign is particularly important, it&rsquo;s the one that states the
function returns a value. If you forget it, then there are two options: You get
an error if the block is not marked with braces or the function doesn&rsquo;t have a
returning value. You&rsquo;ll also get an error if you impose it with a return
directive or give the function a return type:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">def</span> <span class="n">add</span><span class="o">(</span><span class="n">x</span><span class="k">:</span> <span class="kt">Int</span><span class="o">,</span> <span class="n">y</span><span class="k">:</span> <span class="kt">Int</span><span class="o">)</span><span class="k">:</span> <span class="kt">Int</span> <span class="o">{</span> <span class="kt">x</span> <span class="kt">+</span> <span class="kt">y</span> <span class="o">}</span> <span class="c1">// Wrong</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="n">add</span><span class="o">(</span><span class="n">x</span><span class="k">:</span> <span class="kt">Int</span><span class="o">,</span> <span class="n">y</span><span class="k">:</span><span class="kt">Int</span><span class="o">)</span> <span class="o">{</span> <span class="k">return</span> <span class="n">x</span> <span class="o">+</span> <span class="n">y</span> <span class="o">}</span> <span class="c1">// Wrong</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="n">add</span><span class="o">(</span><span class="n">x</span><span class="k">:</span> <span class="kt">Int</span><span class="o">,</span> <span class="n">y</span><span class="k">:</span> <span class="kt">Int</span><span class="o">)</span> <span class="n">x</span> <span class="o">+</span> <span class="n">y</span> <span class="c1">// Wrong</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="n">add</span><span class="o">(</span><span class="n">x</span><span class="k">:</span> <span class="kt">Int</span><span class="o">,</span> <span class="n">y</span><span class="k">:</span> <span class="kt">Int</span><span class="o">)</span> <span class="o">{</span> <span class="n">x</span> <span class="o">+</span> <span class="n">y</span> <span class="o">}</span> <span class="c1">// It&#39;s not an error. But the function doesn&#39;t return a value when you apply it.</span>
</span></code></pre></td></tr></table></div></figure>


<p>Functions that doesn&rsquo;t return a value have a special returning type called
Unit, but of course, you can just skip it.</p>

<p>Another important thing is that the reserved word <strong>return</strong>, that exists in
Scala and does the same thing as in Python is not necessary for functions in
order to return a value. In Scala the evaluation of the last expression or
instruction is the returned value of the function. Return is only necessary if
you want to force a return value in the middle of the function (which is not
very functional programming, but it can be done). Also, return requires to
explicit the returning value of the function.</p>

<h3>A Little on Recursion</h3>

<p>Ok, this is a major area in functional programming. There are papers, articles
and books on this subject and I won&rsquo;t be able to do enough justice to it in
just one blog post. Basically, in real functional programming, all loops are
written as recursive functions (instead of using imperative instructions like
<strong>while</strong> or <strong>for</strong>).</p>

<p>A recursive function is a function that in order to give a result, solves a
simpler version of the same function (it calls itself recursively). Taking in
consideration the example given in the <a href="https://docs.python.org/2/tutorial">Python Tutorial</a>
in section 4.6, the Fibonacci function example that takes a integer <em>n</em> and
returns a list containing the Fibonacci series up to <em>n</em> (the one called fib2):</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="k">def</span> <span class="nf">fib2</span><span class="p">(</span><span class="n">n</span><span class="p">):</span> <span class="c"># return Fibonacci series up to n</span>
</span><span class='line'><span class="o">...</span>     <span class="s">&quot;&quot;&quot;Return a list containing the Fibonacci series up to n.&quot;&quot;&quot;</span>
</span><span class='line'><span class="o">...</span>     <span class="n">result</span> <span class="o">=</span> <span class="p">[]</span>
</span><span class='line'><span class="o">...</span>     <span class="n">a</span><span class="p">,</span> <span class="n">b</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">1</span>
</span><span class='line'><span class="o">...</span>     <span class="k">while</span> <span class="n">a</span> <span class="o">&lt;</span> <span class="n">n</span><span class="p">:</span>
</span><span class='line'><span class="o">...</span>         <span class="n">result</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">a</span><span class="p">)</span>    <span class="c"># see below</span>
</span><span class='line'><span class="o">...</span>         <span class="n">a</span><span class="p">,</span> <span class="n">b</span> <span class="o">=</span> <span class="n">b</span><span class="p">,</span> <span class="n">a</span><span class="o">+</span><span class="n">b</span>
</span><span class='line'><span class="o">...</span>     <span class="k">return</span> <span class="n">result</span>
</span><span class='line'><span class="o">...</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">f100</span> <span class="o">=</span> <span class="n">fib2</span><span class="p">(</span><span class="mi">100</span><span class="p">)</span>    <span class="c"># call it</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">f100</span>                <span class="c"># write the result</span>
</span><span class='line'><span class="p">[</span><span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">13</span><span class="p">,</span> <span class="mi">21</span><span class="p">,</span> <span class="mi">34</span><span class="p">,</span> <span class="mi">55</span><span class="p">,</span> <span class="mi">89</span><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>In Scala you can basically copy-paste the algorithm they show and twitch it a
little bit to get the same function:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">import</span> <span class="nn">scala.collection.mutable.ListBuffer</span> <span class="c1">// The equivalent to Python&#39;s list</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="n">fib</span><span class="o">(</span><span class="n">n</span><span class="k">:</span> <span class="kt">Int</span><span class="o">)</span><span class="k">:</span> <span class="kt">List</span><span class="o">[</span><span class="kt">Int</span><span class="o">]</span> <span class="k">=</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">val</span> <span class="n">result</span><span class="k">:</span> <span class="kt">ListBuffer</span><span class="o">[</span><span class="kt">Int</span><span class="o">]</span> <span class="k">=</span> <span class="nc">ListBuffer</span><span class="o">()</span>
</span><span class='line'>  <span class="k">var</span> <span class="n">a</span> <span class="k">=</span> <span class="mi">0</span>
</span><span class='line'>  <span class="k">var</span> <span class="n">b</span> <span class="k">=</span> <span class="mi">1</span>
</span><span class='line'>  <span class="k">var</span> <span class="n">aux</span> <span class="k">=</span> <span class="mi">0</span> <span class="c1">// Needed. Scala doesn&#39;t accept multiple variable assignment</span>
</span><span class='line'>  <span class="k">while</span> <span class="o">(</span><span class="n">a</span> <span class="o">&lt;</span> <span class="n">n</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">result</span> <span class="o">+=</span> <span class="n">a</span>
</span><span class='line'>    <span class="n">aux</span> <span class="k">=</span> <span class="n">a</span>
</span><span class='line'>    <span class="n">a</span> <span class="k">=</span> <span class="n">b</span>
</span><span class='line'>    <span class="n">b</span> <span class="k">=</span> <span class="n">b</span> <span class="o">+</span> <span class="n">aux</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">result</span><span class="o">.</span><span class="n">toList</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">fib</span><span class="o">(</span><span class="mi">100</span><span class="o">)</span> <span class="c1">// Will return List(0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now, as you could see there, there are a couple of difference between this and
the Python version. The main one resides in the use of a third auxiliary
variable, <em>aux</em>, as Scala doesn&rsquo;t support multiple assign over existing
variables, like the instruction: <em>a, b = b, a+b</em>. But on other ways is quite
similar to the Python algorithm.</p>

<p>However, if we want to make this a recursive function, a first approach to do
the same (although not an elegant one) can be represented by:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">def</span> <span class="n">fib</span><span class="o">(</span><span class="n">a</span><span class="k">:</span> <span class="kt">Int</span><span class="o">,</span> <span class="n">b</span><span class="k">:</span> <span class="kt">Int</span><span class="o">,</span> <span class="n">n</span><span class="k">:</span> <span class="kt">Int</span><span class="o">)</span><span class="k">:</span> <span class="kt">List</span><span class="o">[</span><span class="kt">Int</span><span class="o">]</span> <span class="k">=</span> <span class="o">{</span> <span class="c1">// The returning value is mandatory for recursive functions</span>
</span><span class='line'>  <span class="k">if</span> <span class="o">(</span><span class="n">a</span> <span class="o">&gt;</span> <span class="n">n</span><span class="o">)</span> <span class="nc">Nil</span>
</span><span class='line'>  <span class="k">else</span> <span class="n">a</span> <span class="o">::</span> <span class="n">fib</span><span class="o">(</span><span class="n">b</span><span class="o">,</span> <span class="n">a</span><span class="o">+</span><span class="n">b</span><span class="o">,</span> <span class="n">n</span><span class="o">)</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">fib</span><span class="o">(</span><span class="mi">0</span><span class="o">,</span> <span class="mi">1</span><span class="o">,</span> <span class="mi">100</span><span class="o">)</span> <span class="c1">// Will return List(0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Ok, I guess the extra parameters are not really ideal, but you can see that in
this version we didn&rsquo;t need state, we didn&rsquo;t need to import the ListBuffer, we
didn&rsquo;t need the auxiliary variable and we even reduce the written code a lot.
The only sacrifice was to add two extra parameters.</p>

<p>The good thing about Scala (and I think you can also do this in Python as well,
but I&rsquo;m not sure about it), is that you can define a function inside another
function, so, we can rewrite the last function taking advantage of this:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">def</span> <span class="n">fib</span><span class="o">(</span><span class="n">n</span><span class="k">:</span> <span class="kt">Int</span><span class="o">)</span> <span class="k">=</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">def</span> <span class="n">fibaux</span><span class="o">(</span><span class="n">a</span><span class="k">:</span> <span class="kt">Int</span><span class="o">,</span> <span class="n">b</span><span class="k">:</span> <span class="kt">Int</span><span class="o">,</span> <span class="n">n</span><span class="k">:</span> <span class="kt">Int</span><span class="o">)</span><span class="k">:</span> <span class="kt">List</span><span class="o">[</span><span class="kt">Int</span><span class="o">]</span> <span class="k">=</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">a</span> <span class="o">&gt;</span> <span class="n">n</span><span class="o">)</span> <span class="nc">Nil</span>
</span><span class='line'>    <span class="k">else</span> <span class="n">a</span> <span class="o">::</span> <span class="n">fibaux</span><span class="o">(</span><span class="n">b</span><span class="o">,</span> <span class="n">a</span><span class="o">+</span><span class="n">b</span><span class="o">,</span> <span class="n">n</span><span class="o">)</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">fibaux</span><span class="o">(</span><span class="mi">0</span><span class="o">,</span> <span class="mi">1</span><span class="o">,</span> <span class="n">n</span><span class="o">)</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">fib</span><span class="o">(</span><span class="mi">100</span><span class="o">)</span> <span class="c1">// Will return List(0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Nice, huh? In this new version we use a locally defined a <em>fibaux</em> which
result&rsquo;s value we return as the value of the main fib function. Then, we only
need to call <em>fib</em> with only one parameter just like in the imperative version
before and we still manage to save code writing (and avoid state). We can even
declare <em>fibaux</em> without the <em>n</em> parameter as it will take the <em>n</em> parameter
from the fib function scope. But I think getting into that is way more than I&rsquo;m
capable of explain: you should read something on
<a href="https://en.wikipedia.org/wiki/Scope_%28computer_science%29">scope</a>.</p>

<p>Recursion is a powerful resource. And is not easy to master. As everything in
programming, if it is correctly used, it will have lots of advantages, if it&rsquo;s
misused, well, you can guess the results: extreme resource consumption is most
probably what you&rsquo;ll be dealing with.</p>

<blockquote><p>Remember, recursion is a major area in functional programming. There are<br/>papers, articles and books on this subject and I won&#8217;t be able to do enough<br/>justice to it in just one blog post.</p></blockquote>


<p>Well. I think that this is already enough for you to process before moving on
with a new post. Functions are the way to go in Scala. Don&rsquo;t take them for
granted, they are a core concept in the Scala world and can easily define how
good or bad as a Scala programmer you will be. We have some more topics to
discuss on functions before moving on some other subject, but I think this is
enough for today. I&rsquo;m trying to keep this tutorials simple and concise.</p>

<p>As always, thank you for reading. All your feedback and comments are welcome
(even if it&rsquo;s for state a spelling or grammar mistake).</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[From Python to Scala (v): Control Flow Tools]]></title>
    <link href="http://crscardellino.me/blog/post/2014/08/20/from-python-to-scala-v-control-flow-tools/"/>
    <updated>2014-08-20T20:58:48+02:00</updated>
    <id>http://crscardellino.me/blog/post/2014/08/20/from-python-to-scala-v-control-flow-tools</id>
    <content type="html"><![CDATA[<p>Ok, after a short period of laziness, I come back for more. I warned you about
my activity, but, to be fair, it&rsquo;s been a busy couple of weeks at work.</p>

<p>However, before starting, I wanted you to know that there is an upcoming Course
for Functional Programming Principles in Scala in 25 days (starts on September
15th). You can find more information about it (or even enroll in it) at
<a href="https://www.coursera.org/course/progfun">Coursera</a>. The course is in charge of
Martin Odersky, the creator of Scala, so you are in good hands.</p>

<p>So, back to business. On this session let&rsquo;s talk about some more real
programming.</p>

<h3>Control Flow Tools</h3>

<h4>The if statement</h4>

<p>The most basic and probably the most well known statement in programming, the
conditional control flow:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">val</span> <span class="n">x</span><span class="k">:</span> <span class="kt">Int</span> <span class="o">=</span> <span class="mi">10</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="o">(</span><span class="n">x</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="o">)</span>
</span><span class='line'>  <span class="n">println</span><span class="o">(</span><span class="s">&quot;x is Negative&quot;</span><span class="o">)</span>
</span><span class='line'><span class="k">else</span> <span class="k">if</span> <span class="o">(</span><span class="n">x</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="o">)</span>
</span><span class='line'>  <span class="n">println</span><span class="o">(</span><span class="s">&quot;x is Positive&quot;</span><span class="o">)</span>
</span><span class='line'><span class="k">else</span>
</span><span class='line'>  <span class="n">println</span><span class="o">(</span><span class="s">&quot;x is Zero&quot;</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Will return: &quot;x is Positive&quot;</span>
</span></code></pre></td></tr></table></div></figure>




<!-- more -->


<p>Ok, very basic, right? So, what are the differences with Python&rsquo;s <strong>if</strong>?</p>

<p>For starter, the indentation is not actually necessary, it is used for better
reading, but you can put everything with the same indent. Actually, it&rsquo;s even
possible to make an if statement at the same line. But, it is important to
remark, as it dos not holds a colon to delimit the end of the boolean
expression to value, it does needs the parentheses to delimit it.</p>

<p>You can also see that there is no <strong>elif</strong> but you just start another <strong>if</strong> after
the <strong>else</strong>.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">val</span> <span class="n">x</span> <span class="k">=</span> <span class="o">-</span><span class="mi">1</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="o">(</span><span class="n">x</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="o">)</span> <span class="n">println</span><span class="o">(</span><span class="s">&quot;x is Negative&quot;</span><span class="o">)</span> <span class="k">else</span> <span class="k">if</span> <span class="o">(</span><span class="n">x</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="o">)</span> <span class="n">println</span><span class="o">(</span><span class="s">&quot;x is Positive&quot;</span><span class="o">)</span> <span class="k">else</span> <span class="n">println</span><span class="o">(</span><span class="s">&quot;x is Zero&quot;</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Will return: &quot;x is Negative&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="n">x</span> <span class="o">&lt;</span> <span class="mi">0</span> <span class="n">println</span><span class="o">(</span><span class="s">&quot;x is Negative&quot;</span><span class="o">)</span> <span class="c1">// Invalid, will result in error.</span>
</span></code></pre></td></tr></table></div></figure>


<p>The blocking delimiter in an if statement can be nothing as long as there is
only one instruction after the if or the else, or can be the curly braces:
<strong>{</strong> and <strong>}</strong>:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">val</span> <span class="n">x</span> <span class="k">=</span> <span class="o">-</span><span class="mi">2</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="o">(</span><span class="n">x</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">println</span><span class="o">(</span><span class="s">&quot;x is Positive.&quot;</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">val</span> <span class="n">y</span> <span class="k">=</span> <span class="n">x</span> <span class="o">*</span> <span class="mi">2</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">println</span><span class="o">(</span><span class="s">&quot;The double of x is: &quot;</span> <span class="o">+</span> <span class="n">y</span><span class="o">)</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>This programs obviously prints nothing. But if it doesn&rsquo;t have the curly braces
to delimit the if statement, the results would be:</p>

<pre><code>The double of x is: -4
</code></pre>

<p>This happens because when and if lacks curly braces it only takes the immediate
next statement as its body.</p>

<h4>Loop statements</h4>

<p>There are three types of loops in Scala: <strong>while</strong>, <strong>do&hellip;while</strong> and <strong>for</strong>.</p>

<p>The statements <strong>while</strong> and <strong>do&hellip;while</strong> are very similar. The two of them
execute a set of instructions multiple times until the condition they hold is
false. Much like Python&rsquo;s <strong>while</strong>.</p>

<p>Still, the same as with the <strong>if</strong> statement, the delimiter is either the
immediate next instruction or it is delimited by curly braces.</p>

<p>The main difference between <strong>while</strong> and <strong>do&hellip;while</strong>, is that the latter
executes what is inside the block of instructions at least once after checking
on the breaking instruction:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">var</span> <span class="n">x</span> <span class="k">=</span> <span class="mi">10</span>
</span><span class='line'>
</span><span class='line'><span class="k">while</span> <span class="o">(</span><span class="n">x</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">println</span><span class="o">(</span><span class="s">&quot;The value of x is: &quot;</span> <span class="o">+</span> <span class="n">x</span><span class="o">)</span>
</span><span class='line'>  <span class="n">x</span> <span class="o">-=</span> <span class="mi">1</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Will print successively the value of x until x equals 0</span>
</span><span class='line'>
</span><span class='line'><span class="n">x</span> <span class="k">=</span> <span class="mi">10</span>
</span><span class='line'>
</span><span class='line'><span class="k">do</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">println</span><span class="o">(</span><span class="s">&quot;The value of x is: &quot;</span> <span class="o">+</span> <span class="n">x</span><span class="o">)</span>
</span><span class='line'><span class="o">}</span> <span class="k">while</span> <span class="o">(</span><span class="n">x</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Exactly the same</span>
</span><span class='line'>
</span><span class='line'><span class="n">x</span> <span class="k">=</span> <span class="mi">0</span>
</span><span class='line'>
</span><span class='line'><span class="k">while</span> <span class="o">(</span><span class="n">x</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">println</span><span class="o">(</span><span class="s">&quot;The value of x is: &quot;</span> <span class="o">+</span> <span class="n">x</span><span class="o">)</span>
</span><span class='line'>  <span class="n">x</span> <span class="o">-=</span> <span class="mi">1</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Doesn&#39;t print anything. The value of x is 0 at the end of the loop.</span>
</span><span class='line'>
</span><span class='line'><span class="n">x</span> <span class="k">=</span> <span class="mi">0</span>
</span><span class='line'>
</span><span class='line'><span class="k">do</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">println</span><span class="o">(</span><span class="s">&quot;The value of x is: &quot;</span> <span class="o">+</span> <span class="n">x</span><span class="o">)</span>
</span><span class='line'>  <span class="n">x</span> <span class="o">-=</span> <span class="mi">1</span>
</span><span class='line'><span class="o">}</span> <span class="k">while</span> <span class="o">(</span><span class="n">x</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Prints: &quot;The value of x is: 0&quot; and finish. The value of x is -1 at the end of the loop.</span>
</span></code></pre></td></tr></table></div></figure>


<p>The for statement, as much as in Python, is useful for traversing Lists or
Arrays. It&rsquo;s also useful for list comprehensions. These are a very powerful
tools in functional programming, that actually Python also supports (check on
them if you are not familiar with it).</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">val</span> <span class="n">xs</span><span class="k">:</span> <span class="kt">List</span><span class="o">[</span><span class="kt">Int</span><span class="o">]</span> <span class="k">=</span> <span class="nc">List</span><span class="o">(</span><span class="mi">1</span><span class="o">,</span> <span class="mi">2</span><span class="o">,</span> <span class="mi">3</span><span class="o">,</span> <span class="mi">4</span><span class="o">,</span> <span class="mi">5</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">for</span> <span class="o">(</span><span class="n">x</span> <span class="k">&lt;-</span> <span class="n">xs</span><span class="o">)</span> <span class="n">println</span><span class="o">(</span><span class="n">x</span><span class="o">)</span> <span class="c1">// Prints the values of xs, from 1 to 5</span>
</span><span class='line'>
</span><span class='line'><span class="k">val</span> <span class="n">ys</span><span class="k">:</span> <span class="kt">List</span><span class="o">[</span><span class="kt">Int</span><span class="o">]</span> <span class="k">=</span> <span class="k">for</span> <span class="o">(</span><span class="n">x</span> <span class="k">&lt;-</span> <span class="n">xs</span><span class="o">)</span> <span class="k">yield</span> <span class="n">x</span> <span class="o">*</span> <span class="n">x</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// The list ys holds the squares of every value in xs: 1, 4, 9, 16, 25</span>
</span><span class='line'>
</span><span class='line'><span class="k">val</span> <span class="n">zs</span><span class="k">:</span> <span class="kt">List</span><span class="o">[</span><span class="kt">Int</span><span class="o">]</span> <span class="k">=</span> <span class="k">for</span> <span class="o">(</span><span class="n">x</span> <span class="k">&lt;-</span> <span class="n">xs</span> <span class="k">if</span> <span class="n">x</span> <span class="o">%</span> <span class="mi">2</span> <span class="o">==</span> <span class="mi">0</span><span class="o">)</span> <span class="k">yield</span> <span class="n">x</span> <span class="o">/</span> <span class="mi">2</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// The list zs has the half-values of the pairs in xs: 1, 2</span>
</span></code></pre></td></tr></table></div></figure>


<p>If you check on the <strong>yield</strong> instruction, this means that it will return the
result of the next operation as a value. Also, you can use the <strong>if</strong> statement
inside a <strong>for</strong> to set a filter for the values to go through.</p>

<p>The statement after yield can be anything that returns a value, so it can be a
function created before, or even a block (that is actually a function, but
let&rsquo;s not get into that for now) with a returning value at the end:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">val</span> <span class="n">xs</span> <span class="k">=</span> <span class="nc">List</span><span class="o">(</span><span class="mi">1</span><span class="o">,</span> <span class="mi">2</span><span class="o">,</span> <span class="mi">3</span><span class="o">,</span> <span class="mi">4</span><span class="o">,</span> <span class="mi">5</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">val</span> <span class="n">ys</span> <span class="k">=</span> <span class="k">for</span> <span class="o">(</span><span class="n">x</span> <span class="k">&lt;-</span> <span class="n">xs</span><span class="o">)</span> <span class="k">yield</span> <span class="o">{</span>
</span><span class='line'>  <span class="c1">// A lot of different operations over x, stored in a variable called &quot;result&quot;</span>
</span><span class='line'>  <span class="n">result</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>As an ending note on Scala loops, there is no direct control over the loop, I
mean, there is no <strong>break</strong>, <strong>continue</strong> or (may God have mercy on me for this
forbidden word) <strong>goto</strong>. When a loop starts there is no easy way to make it
break or jump on a cycle (you can set an if inside as well as other kinds of
workarounds).</p>

<p>The thing with Scala is, that if you need to mess with the natural flow of a
loop, maybe there is another and cleaner way to do it.</p>

<h4>The range equivalent (to and until)</h4>

<p>If you come from Python, you are surely familiar with the <strong>range</strong> function,
and maybe with the <strong>xrange</strong> function which is a lazy iterator.</p>

<p>In Scala there is a similar way to declare a range, the <strong>to</strong> operator:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">val</span> <span class="n">xs</span> <span class="k">=</span> <span class="mi">0</span> <span class="n">to</span> <span class="mi">10</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// xs now holds a immutable Range object that goes from 0 to 10</span>
</span></code></pre></td></tr></table></div></figure>


<p>The main difference with this an Python&rsquo;s <strong>range</strong>, is that with the <strong>to</strong>
operator you always need the lower boundary: this means there is not equivalent
to <strong>range(10)</strong> for example. And, the resulting range, holds both boundaries:
in our example 0 and 10 are part of the resulting Range object, whereas in
Python, the upper boundary is not in the resulting list. If you want a range
without taking in consideration the upper boundary, you can have it with the
<strong>until</strong> operator:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">val</span> <span class="n">xs</span> <span class="k">=</span> <span class="mi">0</span> <span class="n">until</span> <span class="mi">10</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// xs holds a Range that goes from 0 to 9</span>
</span><span class='line'>
</span><span class='line'><span class="k">for</span> <span class="o">(</span><span class="n">x</span> <span class="k">&lt;-</span> <span class="mi">0</span> <span class="n">until</span> <span class="mi">10</span><span class="o">)</span> <span class="n">println</span><span class="o">(</span><span class="n">x</span><span class="o">)</span> <span class="c1">// Will print all the numbers from 0 to 9</span>
</span></code></pre></td></tr></table></div></figure>


<p>As you could see in the last examples, the <strong>until</strong> (as well as the <strong>to</strong>)
operator, can be used directly in a for loop to create a range to loop over it.</p>

<h4>The pass equivalent</h4>

<p>For the last of today&rsquo;s post, I&rsquo;ll make a brief reference to Python&rsquo;s <strong>pass</strong>
Scala equivalent. There is none, as simple as that, in Scala if you don&rsquo;t want
to do something you just leave a blank space (as long as it is clear that there
is a blank statement):</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">class</span> <span class="nc">EmptyClass</span> <span class="c1">// Is valid</span>
</span><span class='line'>
</span><span class='line'><span class="k">for</span> <span class="o">(</span><span class="n">x</span> <span class="k">&lt;-</span> <span class="mi">0</span> <span class="n">until</span> <span class="mi">10</span><span class="o">)</span> <span class="o">{}</span> <span class="c1">// Will go through the for without doing anything</span>
</span><span class='line'>
</span><span class='line'><span class="k">for</span> <span class="o">(</span><span class="n">x</span> <span class="k">&lt;-</span> <span class="mi">0</span> <span class="n">until</span> <span class="mi">10</span><span class="o">)</span> <span class="c1">// Wrong, it&#39;s ambiguous where the the blank statement is</span>
</span></code></pre></td></tr></table></div></figure>


<p>Ok. I think this is more than enough for today. We learned some of the most
common control flow structures on Scala. Go and experiment by yourselves now.
As always, don&rsquo;t hesitate to leave your comments.</p>

<p>Thank you for reading. See you soon!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Why Did I Choose Scala?]]></title>
    <link href="http://crscardellino.me/blog/post/2014/08/11/why-did-i-choose-scala/"/>
    <updated>2014-08-11T20:53:54+02:00</updated>
    <id>http://crscardellino.me/blog/post/2014/08/11/why-did-i-choose-scala</id>
    <content type="html"><![CDATA[<p>So, on this entry I&rsquo;ll put a halt on the series of tutorials I&rsquo;ve been writing.
Instead I think it&rsquo;s time to give a personal opinion in why did I choose
<a href="http://scala-lang.org/">Scala</a> as my new main language.</p>

<p>Before keep going on this, I&rsquo;ll just state that this is a complete personal
opinion on Scala, is completely subjective. The reason why I chose it is mine
and doesn&rsquo;t have to be your reason to choose it, but maybe you&rsquo;ll find some
useful insights on what advantages I think the language has.</p>

<p>So, a couple of friends and co-workers asked me &ldquo;Why Scala over Python? (or any
other language for that matter)&rdquo;, I guess I&rsquo;ve never answered with a full
justification on why did I do it. Actually, I don&rsquo;t think I have a real or
valid justification more than &ldquo;because I liked it&rdquo;, but I do want to state some
stuff that end up with me switching from a Python programmer to a Scala
programmer.</p>

<!-- more -->


<h4>I got bored</h4>

<p>I don&rsquo;t think this counts as a real &ldquo;advantage&rdquo;, but it&rsquo;s definitely one of the
main reasons. Before Scala I was a Python programmer for 4 years, and I just
got bored. Programming in Python wasn&rsquo;t fun anymore, wasn&rsquo;t challenging enough.
Don&rsquo;t take this the wrong way, it&rsquo;s not that I&rsquo;ve learnt everything I could in
Python, that&rsquo;s completely ridiculous, I&rsquo;m as far as learning or using all that
Python has to offer as I can get. But, somehow, I wasn&rsquo;t interested in
learning new things in Python.</p>

<p>Maybe was the fact that in the Zen of Python &ldquo;There should be one&ndash; and
preferably only one &ndash;obvious way to do it&rdquo;, which is a great way but not fun
enough for me. But probably was the mere fact that 4 years with the same
language was far more than what I wanted.</p>

<p>Nonetheless, I don&rsquo;t regret knowing Python, is still a wonderful language to
learn, specially for a starter programmer. Simple and plain, easy to read even
if you coded it years ago.</p>

<p>And of course, with these I&rsquo;m not saying Scala is better than Python, nor is
that my intention. Scala and Python are just different, they offer different
things and provide different ways for programming.</p>

<h4>Functional Programming</h4>

<p>Scala is a multi-paradigm language. It can be used with an imperative language
orientation (much like Java, C++ or Python), but it&rsquo;s designed with the idea of
functional programming in it&rsquo;s core.</p>

<p>Functional programming is something very different from imperative programming,
and probably is not as natural as the latter. Is a paradigm harder to learn and
even harder to master (at least from my point of view). And in general term has
always been associated with the academia (with LISP or Haskell as references).
However, when you start to use this paradigm, is extremely good in dealing with
many issues, specially nowadays. For example, functional programming languages
can handle concurrency like no other languages as they are stateless. Other
nice features include the always useful pattern matching and the extremely
powerful high-order functions.</p>

<p>There is a good article called
<a href="http://www.defmacro.org/ramblings/fp.html">Functional Programming For The Rest Of Us</a>.
Take a look at it, it&rsquo;s an interesting read.</p>

<p>I learned the functional programming paradigm in the university, in my first
courses of algorithms and data structures. Back then I used Haskell and to be
honest I hated it. It wasn&rsquo;t clear for me, it made me have headaches. But, I
guess that with time I became mature enough to know the advantages of this
paradigm.</p>

<p>You can tell me, if I like functional programming, why not LISP or Haskell
then? Real purely functional programming languages. And it&rsquo;s as simple as
saying, it&rsquo;s still not natural for me to use a purely functional language, it
would take me too much time to code some functionalities. That&rsquo;s why I prefer
Scala, because, if I don&rsquo;t know how to do something in the functional way I
still can do it in the imperative way. It&rsquo;s not the cleanest solution, I know,
but when experimenting, it&rsquo;s a solution. Then I can try to arrange it so it&rsquo;s
either all functional or all imperative.</p>

<p>Besides, after years of imperative programming in Python, it&rsquo;s smoother to jump
to a language that allows me to do things the way I used to do them instead of
a language that makes me learn new ways for everything. Once I&rsquo;ve mastered
Scala I can jump to something more pure in the functional paradigm (that is, if
Scala cannot accomplish it, which I doubt).</p>

<p>Finally, Scala, as a functional language, has been given the tools necessary to
go <a href="http://www.reactivemanifesto.org/">reactive</a>, making concurrency and
distribution easier and giving a nice and elegant way to asynchronous
programming.</p>

<h4>Static Types</h4>

<p>If there is a thing that Python lacks of are static types. Of course, this is a
matter of pure perspective, since for some people this is an advantage of
Python. You don&rsquo;t have to deal with variable types so it&rsquo;s a weight you take
off your back.</p>

<p>This, however, is not the case for me. At the beginning I thought dynamic
typing was a great feature, you could make reuse of variables without having to
deal with them being already used. But, as I experienced in some codes I did
across my time as Python coder, I realized most of the time is good to have a
registry on what are the variables you are using and the type they have on
them. Specially when I dealt with experimentations in Natural Language.</p>

<p>Still, the great thing that Scala has over static typed languages (think Java
for example), is the fact that it packs a type inferrer. This makes the coding
much easier and far less verbose than a Java application. Like it&rsquo;s presented
in the <a href="http://scala-lang.org/">Scala Website</a>: Don&rsquo;t work for the type system.
Let the type system work for you.</p>

<p>After years of dynamic typing, I come back once again to the good old static
typing, and I&rsquo;m happy with it.</p>

<h4>Compilation to JVM</h4>

<p>Scala compiles over the JVM, that&rsquo;s why it&rsquo;s called a <em>JVM language</em> (just like
Jython, Clojure, Groovy or JRuby).</p>

<p>This compilation to Java bytecode gives Scala a couple of nice features. The
very first is speed, as it compiles to something nearer to object code (and thus
near to machine code), a typical Scala application is only
<a href="http://benchmarksgame.alioth.debian.org/u32/which-programs-are-fastest.php">2 or 3 times</a>
slower than a C application, whereas a Python application can be up to
<a href="http://benchmarksgame.alioth.debian.org/u32/which-programs-are-fastest.php">50 times slower</a>
than a C application.</p>

<p>The second great feature resides in its seamless interoperation with Java. As
it is stated in the <a href="http://scala-lang.org/">Scala Website</a>: &ldquo;Scala classes are
ultimately JVM classes. You can create Java objects, call their methods and
inherit from Java classes transparently from Scala. Similarly, Java code can
reference Scala classes and objects.</p>

<p>In general terms, this is a very big deal. Why? It&rsquo;s simple, because Java has
been an industrial standard for years now, and that translated in hundred if
not thousands of useful libraries written for Java that are completely useful
for building Scala applications.</p>

<p>A programming language is as powerful as the libraries it has to back it up
(that&rsquo;s precicely why Java and C++ are top choices in the market). The more
libraries, the less code you have to rewrite (an important principle in
programming is to never reinvent the wheel). Scala is growing in libraries
everyday, but the collection probably is not as large as Python&rsquo;s. However,
Java libraries&#8217; collection is as large (and probably even larger) as Python&rsquo;s
collection, and the fact that this are useful for Scala programs as well give a
Scala a great advantage over many other new languages.</p>

<p>If you are asking, ok but, why not use Java then? Simple, I&rsquo;ve never been a
Java enthusiast, and although I respect the contribution it has given to the
programming environment, I still prefer the less verbose code of Scala, and
then again, Java is not a functional programming language.</p>

<h4>A Cool Kid</h4>

<p>Finally, the last reason I choose Scala as new toy to play with. In the last
years, Scala community has grown a lot, and it&rsquo;s in part because is a new
technology or, a more slang way to say it: &ldquo;it&rsquo;s what cool kids are doing&rdquo;.</p>

<p>Ok, maybe &ldquo;cool kid&rdquo; is way too arrogant to state it. Still, what I mean is
that a big generation of early adopters in programming languages has been
turning into one of these two new technologies these last couple of years:
JavaScript, commonly a client-side language to give web applications a little
more &ldquo;dynamic&rdquo;, has been increasing in usability since the launch of NodeJS
(another new tool I&rsquo;m interested in), using the JavaScript V8 engine to build
side-server JavaScript applications; And the other one is Scala, with the
reactive programming manifesto and the easiness in coding asynchronous
applications.</p>

<p>Personally, I&rsquo;ve never been an early adopter, I&rsquo;ve always preferred a good old
fashion stable Debian OS over a fancy latest model Ubuntu. But, as I stated
before, I got bored, and as a result of that, I wanted to learn something new,
something different, and Scala has been so far a smooth ride.</p>

<p>That&rsquo;s all I had to say about this. I hope you liked my insight on this
beautiful language and my post leads you to learn it. If you really put
yourself into it you&rsquo;ll find out the potential of this language is excellent
and you won&rsquo;t be regretted in adopting Scala.</p>

<p>Thank you for reading.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[From Python to Scala (IV): Arrays &amp; ListBuffers]]></title>
    <link href="http://crscardellino.me/blog/post/2014/08/07/from-python-to-scala-iv-arrays-and-listbuffers/"/>
    <updated>2014-08-07T20:48:14+02:00</updated>
    <id>http://crscardellino.me/blog/post/2014/08/07/from-python-to-scala-iv-arrays-and-listbuffers</id>
    <content type="html"><![CDATA[<p>Ok. So, now you&rsquo;ve learnt about Scala lists. As you could see in the previous
examples, Scala has a very <em>functional</em> kind of lists, as these are immutable.</p>

<p>If you are ever to use Scala as a functional programming language this is the
way to go. I really recommend you to, at least, try to learn this paradigm, as
it is design purpose and has many advantages. But, then again, even now I
sometimes go back to imperative programming in Scala myself because is more
natural to me. Scala as imperative language is pretty similar to Java, so as a
side effect I ended up learning how to read Java code (I knew some Java but
only the basics, learning Scala my Java understanding improved a lot).</p>

<p>But, lets say that functional programming is way too much to deal with now and
you want to know a type more similar to Python lists, the oldie but goodie
mutable lists. You have a couple of options of data structures available in
Scala, I&rsquo;ll present two of the most commons.</p>

<h4>Scala Arrays</h4>

<p>Ok, if my university&rsquo;s data structure teacher sees me presenting Scala arrays as
an option for a &ldquo;mutable&rdquo; list he probably would take away my degree and force
me to redo the Computer Sciences career all over again.</p>

<p>An array <strong>is not</strong> a list and will never be one. But, for someone who comes
from a Python environment, it&rsquo;s probably an easy option to replace a immutable
list for a mutable version.</p>

<p>Arrays are the simplest and one of the oldest (if not <em>the</em> oldest) data
structure you&rsquo;ll ever face with. In fact, most high-level programming languages
lists are internally implemented as arrays. If you&rsquo;ve ever deal with a real old
imperative programming language (I&rsquo;m looking at you C developer), you are
familiar to the concept of array. The thing is that Python doesn&rsquo;t really have
them (at least not internally, you&rsquo;ll have to import a module for dealing with
arrays).</p>

<p>Arrays have some pros and cons in programming, as every data structure. Among
the most common pros of an array you&rsquo;ll find the efficiency they carry in
comparison to lists. As arrays are represented as collection of elements (of
the same type) stored in a continuous space of memory. They differ from lists
in that you&rsquo;ll have an index for all the elements (which makes the access time
of a constant order) and in general are faster to make operations than in lists
which can have chunks of elements sparse in many places.</p>

<!-- more -->


<p>Arrays in Scala are a built-in type (you don&rsquo;t have to import them), and they
are completely compatible with Java arrays (in fact, are implemented as a
wrapper of Java arrays). And, as most arrays, they are naturally mutable as
they are stateful data structure (which makes them perfect for imperative
paradigms that relies on state), in contrast to stateless data structures like
lists (more associated to functional paradigm):</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="n">scala</span><span class="o">&gt;</span> <span class="k">val</span> <span class="n">array</span><span class="k">:</span> <span class="kt">Array</span><span class="o">[</span><span class="kt">Int</span><span class="o">]</span> <span class="k">=</span> <span class="nc">Array</span><span class="o">(</span><span class="mi">1</span><span class="o">,</span> <span class="mi">2</span><span class="o">,</span> <span class="mi">3</span><span class="o">)</span>
</span><span class='line'><span class="n">array</span><span class="k">:</span> <span class="kt">Array</span><span class="o">[</span><span class="kt">Int</span><span class="o">]</span> <span class="k">=</span> <span class="nc">Array</span><span class="o">(</span><span class="mi">1</span><span class="o">,</span> <span class="mi">2</span><span class="o">,</span> <span class="mi">3</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">scala</span><span class="o">&gt;</span> <span class="n">array</span><span class="o">(</span><span class="mi">0</span><span class="o">)</span>
</span><span class='line'><span class="n">res0</span><span class="k">:</span> <span class="kt">Int</span> <span class="o">=</span> <span class="mi">1</span>
</span><span class='line'>
</span><span class='line'><span class="n">scala</span><span class="o">&gt;</span> <span class="n">array</span><span class="o">(</span><span class="mi">0</span><span class="o">)</span> <span class="k">=</span> <span class="mi">5</span> <span class="c1">// This, not valid in lists, is valid in arrays.</span>
</span><span class='line'>
</span><span class='line'><span class="n">scala</span><span class="o">&gt;</span> <span class="n">array</span><span class="o">(</span><span class="mi">0</span><span class="o">)</span>  <span class="c1">// Arrays are mutable!</span>
</span><span class='line'><span class="n">res1</span><span class="k">:</span> <span class="kt">Int</span> <span class="o">=</span> <span class="mi">5</span>
</span></code></pre></td></tr></table></div></figure>


<p>In general terms, you&rsquo;ll be able to do many of the lists&#8217; operations in an
array (like concatenation, traverse, length). However, as I state before,
arrays are not lists, and cannot replace them in all the occasions. The thing
is that arrays <em>do not</em> have a functionality to add (append or prepend)
elements to them (and if they do, usually are very time and resource consuming
which is not a good idea). You can emulate it with the concatenation, but it&rsquo;s
not the same thing, and this workaround creates a new structure instead of
modifying the existing one:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">var</span> <span class="n">array</span> <span class="k">=</span> <span class="nc">Array</span><span class="o">(</span><span class="mi">1</span><span class="o">,</span> <span class="mi">2</span><span class="o">)</span> <span class="c1">// Pay attention to the &quot;var&quot; instead of &quot;val&quot;</span>
</span><span class='line'><span class="n">array</span><span class="o">(</span><span class="mi">2</span><span class="o">)</span> <span class="c1">// Will throw an exception.</span>
</span><span class='line'>
</span><span class='line'><span class="n">array</span> <span class="k">=</span> <span class="n">array</span> <span class="o">++</span> <span class="nc">Array</span><span class="o">(</span><span class="mi">3</span><span class="o">)</span> <span class="c1">// I&#39;m reassigning the array value as &quot;++&quot; creates a new structure.</span>
</span><span class='line'><span class="n">array</span><span class="o">(</span><span class="mi">2</span><span class="o">)</span> <span class="c1">// The new array now has three elements. This will return 3.</span>
</span></code></pre></td></tr></table></div></figure>


<p>Ok, all good, we now have a workaround and it works. Not the simplest and
definitely not the prettiest one, but it works. All set? Are we happy? Of
course we are not happy. It can&rsquo;t be that Scala won&rsquo;t consider a real mutable
list in its library.</p>

<p>Then again, you are right, the Scala team of course made this consideration.
But it&rsquo;s not a built-in data structure, but one you&rsquo;ll have to import from the
Scala collection library.</p>

<h4>Scala ListBuffer</h4>

<p>Ok, so we finally meet a real equivalent to the Python list. Or at least the
closest one I can think of. Scala ListBuffer is a mutable data structure which
can mimic a Python list&rsquo;s operations.</p>

<p>For this you&rsquo;ll have to import it as it is not in the built-in types of Scala
(but is included in the Scala library). First, let see a little about module
imports:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">import</span> <span class="nn">scala.collection.mutable.ListBuffer</span> <span class="c1">// Self explanatory</span>
</span><span class='line'>
</span><span class='line'><span class="k">import</span> <span class="nn">scala.collection.mutable._</span>  <span class="c1">// Equivalent to Python: from library.sublibrary import *</span>
</span><span class='line'>
</span><span class='line'><span class="k">import</span> <span class="nn">scala.collection.mutable.</span><span class="o">{</span><span class="nc">ListBuffer</span> <span class="k">=&gt;</span> <span class="nc">MutableList</span><span class="o">}</span> <span class="c1">// Rename of the import</span>
</span></code></pre></td></tr></table></div></figure>


<p>Very basics, don&rsquo;t think you need too much to be explained. Now lets get to the
real deal. Listbuffers, as well as arrays, are mutable in its values, which
means they can be changed. But also, a listbuffer has the classic append and
prepend operations without the need of creating a new structure out of it:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="n">scala</span><span class="o">&gt;</span> <span class="k">val</span> <span class="n">list</span> <span class="k">=</span> <span class="nc">ListBuffer</span><span class="o">(</span><span class="mi">1</span><span class="o">,</span> <span class="mi">2</span><span class="o">,</span> <span class="mi">3</span><span class="o">)</span> <span class="c1">// ListBuffer can only store one type values as well as a List. Is a &quot;val&quot;.</span>
</span><span class='line'><span class="n">list</span><span class="k">:</span> <span class="kt">ListBuffer</span><span class="o">[</span><span class="kt">Int</span><span class="o">]</span> <span class="k">=</span> <span class="nc">ListBuffer</span><span class="o">(</span><span class="mi">1</span><span class="o">,</span> <span class="mi">2</span><span class="o">,</span> <span class="mi">3</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">scala</span><span class="o">&gt;</span> <span class="n">list</span><span class="o">(</span><span class="mi">0</span><span class="o">)</span>
</span><span class='line'><span class="n">res0</span><span class="k">:</span> <span class="kt">Int</span> <span class="o">=</span> <span class="mi">1</span>
</span><span class='line'>
</span><span class='line'><span class="n">scala</span><span class="o">&gt;</span> <span class="n">list</span><span class="o">(</span><span class="mi">0</span><span class="o">)</span> <span class="k">=</span> <span class="mi">2</span>  <span class="c1">// This is valid in ListBuffer</span>
</span><span class='line'>
</span><span class='line'><span class="n">scala</span><span class="o">&gt;</span> <span class="n">list</span><span class="o">(</span><span class="mi">0</span><span class="o">)</span>
</span><span class='line'><span class="n">res1</span><span class="k">:</span> <span class="kt">Int</span> <span class="o">=</span> <span class="mi">2</span>
</span><span class='line'>
</span><span class='line'><span class="n">scala</span><span class="o">&gt;</span> <span class="n">list</span><span class="o">.</span><span class="n">append</span><span class="o">(</span><span class="mi">4</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">scala</span><span class="o">&gt;</span> <span class="n">list</span>
</span><span class='line'><span class="n">res2</span><span class="k">:</span> <span class="kt">ListBuffer</span><span class="o">[</span><span class="kt">Int</span><span class="o">]</span> <span class="k">=</span> <span class="nc">ListBuffer</span><span class="o">(</span><span class="mi">2</span><span class="o">,</span> <span class="mi">2</span><span class="o">,</span> <span class="mi">3</span><span class="o">,</span> <span class="mi">4</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">scala</span><span class="o">&gt;</span> <span class="n">list</span><span class="o">.</span><span class="n">prepend</span><span class="o">(</span><span class="mi">1</span><span class="o">)</span> <span class="k">=</span> <span class="nc">ListBuffer</span><span class="o">(</span><span class="mi">1</span><span class="o">,</span> <span class="mi">2</span><span class="o">,</span> <span class="mi">2</span><span class="o">,</span> <span class="mi">3</span><span class="o">,</span> <span class="mi">4</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Listbuffers also offer an operator to deal with appending elements at the end.
And finally, they can be easily converted to a Scala list for further working
(if by any chance you needed the listbuffer for an initial construction but
then all the operations are regular list operations):</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">val</span> <span class="n">list</span> <span class="k">=</span> <span class="nc">ListBuffer</span><span class="o">(</span><span class="mi">1</span><span class="o">,</span> <span class="mi">2</span><span class="o">)</span>
</span><span class='line'><span class="n">list</span> <span class="o">+=</span> <span class="mi">3</span> <span class="c1">// The new value of the list is: ListBuffer(1, 2, 3).</span>
</span><span class='line'>
</span><span class='line'><span class="n">list</span> <span class="o">+</span> <span class="mi">3</span> <span class="c1">// Beware! this make no sense. And in many cases will throw a type mismatch.</span>
</span><span class='line'>
</span><span class='line'><span class="n">list</span> <span class="k">=</span> <span class="n">list</span> <span class="o">+</span> <span class="mi">3</span> <span class="c1">// Wrong. Even if the operation is permitted (not this case) this is a val reassign.</span>
</span><span class='line'>
</span><span class='line'><span class="n">list</span><span class="o">.</span><span class="n">toList</span> <span class="c1">// Returns a Scala List</span>
</span><span class='line'><span class="n">list</span><span class="o">.</span><span class="n">result</span> <span class="c1">// Same as before</span>
</span></code></pre></td></tr></table></div></figure>


<p>There&rsquo;s also a Scala structure that you can import from the same library of the
ListBuffer, called ArrayBuffer. It provides functionality to append elements
similar to the one of the ListBuffer, but it returns an Array, which is a
better structure (more efficient) when you have to deal with large collections
and more imperative programming. Don&rsquo;t use it if you&rsquo;ll have to prepend many
values or you need the final result to be a list.</p>

<p>Other common data structures implemented in the Scala library include queues
and stacks (with internal array and list representations according to what you
need). I leave it to you to find out and look at the best option for you. The
Scala documentation is pretty well
<a href="http://docs.scala-lang.org/overviews/collections/introduction.html">written regarding the collections</a>,
specially the part where it explains the
<a href="http://docs.scala-lang.org/overviews/collections/performance-characteristics.html">performance characteristics</a>.</p>

<p>Ok my fellow readers. I hope you enjoyed the new chapter on my Python to Scala
tutorial. As always, thank you for your time and all comments are welcome.
Until next time, happy coding!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[From Python to Scala (III): Lists]]></title>
    <link href="http://crscardellino.me/blog/post/2014/08/05/from-python-to-scala-iii-lists/"/>
    <updated>2014-08-05T20:34:28+02:00</updated>
    <id>http://crscardellino.me/blog/post/2014/08/05/from-python-to-scala-iii-lists</id>
    <content type="html"><![CDATA[<p>Following with the series in this crash course from Python to Scala, today I&rsquo;ll
introduce one of the most useful Scala&rsquo;s data structures and make the
comparison to Python.</p>

<h4>Scala Lists</h4>

<p>Starting off with one of the most used data structures in Scala (and in
functional languages in general) and also the most common data structure in
Python as well: the lists.</p>

<p>A list in Scala is a data structure to represent a collection of values of the
same type. Lists are very used in Python, and the concept is quite similar in
Scala, with a couple of exceptions. First, in Python are written as a list of
comma-separated values between square brackets. The empty list, is represented
as a pair of empty square brackets:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">squares</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">9</span><span class="p">,</span> <span class="mi">16</span><span class="p">,</span> <span class="mi">25</span><span class="p">]</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">squares</span>
</span><span class='line'><span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">9</span><span class="p">,</span> <span class="mi">16</span><span class="p">,</span> <span class="mi">25</span><span class="p">]</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">empty</span> <span class="o">=</span> <span class="p">[]</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">empty</span>
</span><span class='line'><span class="p">[]</span>
</span></code></pre></td></tr></table></div></figure>


<p>In Scala, a list is build with the use of a constructor of name <em>List</em> and
the values passed by parameter to the constructor. The empty list is
represented by the empty constructor:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="n">scala</span><span class="o">&gt;</span> <span class="k">val</span> <span class="n">squares</span> <span class="k">=</span> <span class="nc">List</span><span class="o">(</span><span class="mi">1</span><span class="o">,</span> <span class="mi">4</span><span class="o">,</span> <span class="mi">9</span><span class="o">,</span> <span class="mi">16</span><span class="o">,</span> <span class="mi">25</span><span class="o">)</span>
</span><span class='line'><span class="n">squares</span><span class="k">:</span> <span class="kt">List</span><span class="o">[</span><span class="kt">Int</span><span class="o">]</span> <span class="k">=</span> <span class="nc">List</span><span class="o">(</span><span class="mi">1</span><span class="o">,</span> <span class="mi">4</span><span class="o">,</span> <span class="mi">9</span><span class="o">,</span> <span class="mi">16</span><span class="o">,</span> <span class="mi">25</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">scala</span><span class="o">&gt;</span> <span class="k">val</span> <span class="n">empty</span> <span class="k">=</span> <span class="nc">List</span><span class="o">()</span>
</span><span class='line'><span class="n">empty</span><span class="k">:</span> <span class="kt">List</span><span class="o">[</span><span class="kt">Nothing</span><span class="o">]</span> <span class="k">=</span> <span class="nc">List</span><span class="o">()</span>
</span></code></pre></td></tr></table></div></figure>




<!-- more -->


<p>One major difference between Python and Scala lists, is in the type. Python
support lists of different types, however in general (and is a good practice to
stick to it) lists in Python only contain elements of the same type. In Scala
this is not optional, lists may only contain elements of the same type in them.</p>

<p>If you take a good look at the previous examples, you&rsquo;ll notice that Scala uses
its type infer engine to determine the type of the lists. In the case of the
&ldquo;squares&rdquo; list, it&rsquo;s inferred that is a list of Int, while in the case of the
&ldquo;empty&rdquo; list, it is inferred that is a list of Nothing since there&rsquo;s no
information to determine the type of the list (it has no value).</p>

<p>Of course, as Scala lets you declare the type of a value or a variable, it&rsquo;s
possible to force the empty list to be of a certain type. This is very useful
in the needing of making some kind of manipulation between lists and operations
that requires the same type of list.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">var</span> <span class="n">empty</span> <span class="k">=</span> <span class="nc">List</span><span class="o">()</span>
</span><span class='line'><span class="n">empty</span> <span class="k">=</span> <span class="nc">List</span><span class="o">(</span><span class="mi">1</span><span class="o">,</span> <span class="mi">2</span><span class="o">,</span> <span class="mi">3</span><span class="o">)</span> <span class="c1">// Incorrect. Results in a type error.</span>
</span><span class='line'>
</span><span class='line'><span class="k">var</span> <span class="n">emptyIntList</span><span class="k">:</span> <span class="kt">List</span><span class="o">[</span><span class="kt">Int</span><span class="o">]</span> <span class="k">=</span> <span class="nc">List</span><span class="o">()</span>
</span><span class='line'><span class="n">emptyIntList</span> <span class="k">=</span> <span class="nc">List</span><span class="o">(</span><span class="mi">1</span><span class="o">,</span> <span class="mi">2</span><span class="o">,</span> <span class="mi">3</span><span class="o">)</span> <span class="c1">// Correct. New value of the variable is List(1, 2, 3)</span>
</span><span class='line'>
</span><span class='line'><span class="n">emptyIntList</span> <span class="k">=</span> <span class="nc">List</span><span class="o">(</span><span class="s">&quot;a&quot;</span><span class="o">,</span> <span class="s">&quot;b&quot;</span><span class="o">,</span> <span class="s">&quot;c&quot;</span><span class="o">)</span> <span class="c1">// Incorrect. Results in type error.</span>
</span></code></pre></td></tr></table></div></figure>


<p>Scala lists have a another constructor operator, named <strong>cons</strong> and represented
by two colons <strong>::</strong>. Along with another constructor for the empty list:
<strong>Nil</strong>. If you&rsquo;ve never heard about functional programming, this concept is
maybe new to you. For people with Lisp or Haskell background it comes quite
natural. In simple terms, a list in Scala can be constructed like so:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">val</span> <span class="n">square</span> <span class="k">=</span> <span class="mi">1</span> <span class="o">::</span> <span class="o">(</span><span class="mi">4</span> <span class="o">::</span> <span class="o">(</span><span class="mi">9</span> <span class="o">::</span> <span class="nc">Nil</span><span class="o">))</span> <span class="c1">// Equivalent to List(1, 4, 9)</span>
</span><span class='line'>
</span><span class='line'><span class="k">val</span> <span class="n">empty</span> <span class="k">=</span> <span class="nc">Nil</span> <span class="c1">// Equivalent to List() with type List[Nothing]</span>
</span><span class='line'>
</span><span class='line'><span class="k">val</span> <span class="n">emptyIntList</span><span class="k">:</span> <span class="kt">List</span><span class="o">[</span><span class="kt">Int</span><span class="o">]</span> <span class="k">=</span> <span class="nc">Nil</span> <span class="c1">// Equivalent to List() with type List[Int]</span>
</span></code></pre></td></tr></table></div></figure>


<p>Although this format may seem unnatural for a Python programmer (and most
unnatural for someone who only knows imperative paradigm), this notation is
quite common and is very useful, as a matter of fact is essential, in pattern
matching, something we&rsquo;ll talk about later and that you must know if you plan
to use Scala at its full potential.</p>

<h4>Operations over Lists</h4>

<p>The three most common operations over a list are: <em>isEmpty</em>, <em>head</em> and <em>tail</em>.
The <em>isEmpty</em> operation, as its name says, check wether a list is empty or not.
The <em>head</em> operation over a list will return the first element of the list,
much like Python&rsquo;s &ldquo;pop(0)&rdquo;, but with the difference that it won&rsquo;t alter the
original list. Finally, the <em>tail</em> operation has no direct map to a Python&rsquo;s
list function (as far as I know of) and will return a new list with all the
elements of the original list but the first:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">val</span> <span class="n">empty</span> <span class="k">=</span> <span class="nc">Nil</span>
</span><span class='line'><span class="n">empty</span><span class="o">.</span><span class="n">isEmpty</span> <span class="c1">// Will return true</span>
</span><span class='line'>
</span><span class='line'><span class="k">val</span> <span class="n">squares</span> <span class="k">=</span> <span class="nc">List</span><span class="o">(</span><span class="mi">1</span><span class="o">,</span> <span class="mi">4</span><span class="o">,</span> <span class="mi">9</span><span class="o">)</span>
</span><span class='line'><span class="n">squares</span><span class="o">.</span><span class="n">isEmpty</span> <span class="c1">// Will return false</span>
</span><span class='line'>
</span><span class='line'><span class="n">squares</span><span class="o">.</span><span class="n">head</span> <span class="c1">// Will return 1</span>
</span><span class='line'><span class="n">squares</span><span class="o">.</span><span class="n">tail</span> <span class="c1">// Will return List(4, 9)</span>
</span><span class='line'><span class="n">squares</span>      <span class="c1">// Will return List(1, 4, 9). The original list never changes.</span>
</span><span class='line'>
</span><span class='line'><span class="n">empty</span><span class="o">.</span><span class="n">head</span>   <span class="c1">// Invalid. Result in an exception. The same happens to empty.tail</span>
</span></code></pre></td></tr></table></div></figure>


<p>As lists in Python, lists in Scala also have an indexing function, and as well
as in Python, indexing starts from 0. The difference is that negative indexing
is not possible in Scala:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="n">squares</span><span class="o">(</span><span class="mi">0</span><span class="o">)</span> <span class="c1">// Returns 1. Note that the indexing is with &quot;()&quot; instead of &quot;[]&quot;.</span>
</span><span class='line'><span class="n">squares</span><span class="o">(</span><span class="mi">2</span><span class="o">)</span> <span class="c1">// Returns 9.</span>
</span><span class='line'><span class="n">squares</span><span class="o">(</span><span class="mi">3</span><span class="o">)</span> <span class="c1">// Raises an exception.</span>
</span><span class='line'><span class="n">squares</span><span class="o">(-</span><span class="mi">1</span><span class="o">)</span> <span class="c1">// Raises an exception. This is valid in Python, not in Scala.</span>
</span></code></pre></td></tr></table></div></figure>


<p>Another common operation over a list is the slice. In Python this is done with
a colon in the indexing. In Scala you&rsquo;ll have to make use of the function
slice(from, until). Although you can use negative values, this won&rsquo;t work as in
Python:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="n">squares</span><span class="o">.</span><span class="n">slice</span><span class="o">(</span><span class="mi">0</span><span class="o">,</span> <span class="mi">2</span><span class="o">)</span> <span class="c1">// Returns List(1, 4)</span>
</span><span class='line'><span class="n">squares</span><span class="o">.</span><span class="n">slice</span><span class="o">(</span><span class="mi">0</span><span class="o">,</span> <span class="mi">0</span><span class="o">)</span> <span class="c1">// Returns List()</span>
</span><span class='line'><span class="n">squares</span><span class="o">.</span><span class="n">slice</span><span class="o">(-</span><span class="mi">1</span><span class="o">,</span> <span class="mi">5</span><span class="o">)</span> <span class="c1">// Returns List(1, 4, 9)</span>
</span></code></pre></td></tr></table></div></figure>


<p>There is a whole set of other methods and operations you can perform on a list,
and we won&rsquo;t discuss it here, check on the
<a href="http://www.scala-lang.org/api/current/index.html">Scala Documentation</a> for more
information on immutable lists.</p>

<p>This is all wonderful, but the structure that I&rsquo;ve shown you is not exactly the
list structure a Python programmer is used to. Scala&rsquo;s primitive lists are
immutable, which means you are not allowed to change the values they hold once
they are set. Nonetheless, there is another Scala structure that&rsquo;s more similar
to Python lists. We will discuss it in the next part of the tutorial.</p>

<p>Thank you again for reading this tutorial. I hope it&rsquo;s becoming more helpful
with each new post. Please comment if you have anything to add!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[From Python to Scala (II): Types, Variables &amp; Values]]></title>
    <link href="http://crscardellino.me/blog/post/2014/07/30/from-python-to-scala-ii-types/"/>
    <updated>2014-07-30T20:23:39+02:00</updated>
    <id>http://crscardellino.me/blog/post/2014/07/30/from-python-to-scala-ii-types</id>
    <content type="html"><![CDATA[<h4>Scala Types</h4>

<p>Following my series of tutorial of Scala for Python programmers, I&rsquo;ll start to
talk about something most Python programmers don&rsquo;t usually pay attention to
because the language doesn&rsquo;t require it to do so.</p>

<p>I&rsquo;m talking about data types. It&rsquo;s not that Python doesn&rsquo;t have types for its
variables, but as it is a dynamically typed programming language, you usually
don&rsquo;t care about the type of the variable. At least not unless you try to add a
number and a letter: you cannot add apple and oranges, naturally you cannot add
strings and numbers (not at least without conversion first):</p>

<p>In general terms, however, Python won&rsquo;t bother about the type you are giving to
your variables: actually, you won&rsquo;t be able to declare a type for them as
Python will infer it. So, this is perfectly normal for a Python program:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">string</span> <span class="o">=</span> <span class="s">&quot;This is a string&quot;</span>
</span><span class='line'><span class="k">print</span> <span class="n">string</span> <span class="c"># Will output &quot;This is a string&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="n">string</span> <span class="o">+</span> <span class="mi">100</span> <span class="c"># Invalid. Will result in a TypeError exception.</span>
</span><span class='line'>
</span><span class='line'><span class="n">string</span> <span class="o">=</span> <span class="mi">100</span> <span class="c"># Perfectly valid. `string` type will be int from now on.</span>
</span><span class='line'><span class="k">print</span> <span class="n">string</span> <span class="c"># Will output 100</span>
</span><span class='line'>
</span><span class='line'><span class="n">string</span> <span class="o">+</span> <span class="mi">100</span> <span class="c"># Valid. Will result in 200.</span>
</span></code></pre></td></tr></table></div></figure>




<!-- more -->


<p>In Scala this is not the case. Once a variable is assigned a type, it will have
it until the end of that variable&rsquo;s scope. Of course, as in Python, some
operations between variables of different types are not permitted. However, in
this case, sum is not one of those cases. If you add a string to a number,
Scala will automatically transform the number into a String and result in a
String concatenation:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">var</span> <span class="n">string</span> <span class="k">=</span> <span class="s">&quot;This is a string&quot;</span>
</span><span class='line'><span class="n">println</span><span class="o">(</span><span class="n">string</span><span class="o">)</span> <span class="c1">// Will output &quot;This is a string&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="n">string</span> <span class="o">+</span> <span class="mi">100</span> <span class="c1">// Valid. Will result in the string &quot;This is a string100&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="n">string</span> <span class="k">=</span> <span class="mi">100</span> <span class="c1">// Invalid. Will result in a &quot;type mismatch&quot; error.</span>
</span></code></pre></td></tr></table></div></figure>


<p>Scala, as well as Python, can infer the type of the variables you are using.
But, it add the possibility to declare the type of the variable (something that
many times comes in handy as we will see in future tutorials):</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">var</span> <span class="n">string</span><span class="k">:</span> <span class="kt">String</span> <span class="o">=</span> <span class="s">&quot;This is a string with declared type&quot;</span>
</span><span class='line'><span class="k">var</span> <span class="n">num</span><span class="k">:</span> <span class="kt">Int</span> <span class="o">=</span> <span class="mi">100</span> <span class="c1">// This is a number with declared type</span>
</span></code></pre></td></tr></table></div></figure>


<p>Scala has a variety of types (you should check on the
<a href="http://www.scala-lang.org/documentation/">Scala Documentation</a>
for more information on it), but the most common are Int (sometimes written as
Integer), String, Long, Float, Double and Boolean.</p>

<p>Although many Python fans can call this a disadvantage, I personally end up
having better experience with static data typing, as I feel I have more control
over the variables of my application. Then again, this is just a matter of
opinion.</p>

<h4>Variables and Values</h4>

<p>So, now you know that Scala is statically typed, which means once you give
variable a type (either inferred by the compiler or declared by the programmer)
you cannot set that variable to a value of another type.</p>

<p>Scala has also two kinds of &ldquo;variables&rdquo;: mutable and immutable. Ok, maybe it
has only one type of variable, the ones that are mutable, since there is no
much variation in the immutable type. For making this simpler, let&rsquo;s say Scala
has to type of storage locations.</p>

<p>Mutable variables, or just variables, are the classic ones and the most near in
concept to the ones use by Python (with the static type exception). You can
create them with one value and the change them through the whole scope to
whatever value of the same type you want. They are declared with the reserved
word <strong>var</strong>.</p>

<p>Immutable variables, or values, are the ones that will have a constant value
during the whole scope of the variable. If you try to change the value for
another one (even of the same type), the compiler will throw an error. Values
are declared with the reserved word <strong>val</strong>.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">var</span> <span class="n">variable</span><span class="k">:</span> <span class="kt">Int</span> <span class="o">=</span> <span class="mi">10</span> <span class="c1">// This is a Scala variable.</span>
</span><span class='line'>
</span><span class='line'><span class="n">variable</span> <span class="k">=</span> <span class="mi">20</span> <span class="c1">// Valid. &quot;variable&quot; is now set to value 20.</span>
</span><span class='line'>
</span><span class='line'><span class="k">val</span> <span class="n">value</span><span class="k">:</span> <span class="kt">Int</span> <span class="o">=</span> <span class="mi">10</span> <span class="c1">// This is a Scala value.</span>
</span><span class='line'>
</span><span class='line'><span class="n">value</span> <span class="k">=</span> <span class="mi">20</span> <span class="c1">// Invalid. Will result in a compiler error.</span>
</span></code></pre></td></tr></table></div></figure>


<p>If you are coming from the Python environment (or, more in general from a
imperative paradigm environment) you would think values don&rsquo;t have any
usefulness beyond declaring a constant. Nevertheless, in Scala values are quite
fundamental. This is because Scala has been designed as an object-oriented
functional language. The word <em>functional</em> is a big deal here, because the
functional paradigm is quite different from the imperative paradigm which most
of Python programmers are used to.</p>

<p>If you ever tried something like LISP, Haskell or Earlang (also known as
<em>academic languages</em>), the concept of <em>stateless</em> is not a stranger to you. For
most of Python programmers, this is quite unusual though. In the most simple
terms stateless is defined by math functions: you apply a function to some
parameters and get a result. For the same parameters you get the same result
every time, and there will never be an inner state of the function that will
modify that returned value. Stateful (although you probably didn&rsquo;t hear it
under that name) is more common among imperative languages, and means you have
a state that can change the final computation.</p>

<p>This is not a tutorial for functional programming (not even on Scala) but to
understand the basics of Scala. Scala is a multi-paradigm language and can be
used for imperative programming. Still, if you are learning Scala I would
recommend you to learn something on functional programming. Otherwise you will
be wasting the full Scala potential. If you are interested in this matter there
should be lots of tutorials and resources on the internet, but my personal
recommendation is to take the
<a href="https://www.coursera.org/course/progfun">Functional Programming Principles in Scala</a>,
in <a href="https://www.coursera.org/">Coursera</a>, by Martin Odersky (the designer of the
Scala language).</p>

<p>I think is more than enough for this session. As always I appreciate any
feedback on comments (event to tell me I&rsquo;m having some grammar or spelling
mistakes). Thank you for reading!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[From Python to Scala (I): The Basics]]></title>
    <link href="http://crscardellino.me/blog/post/2014/07/28/from-python-to-scala-i-the-basics/"/>
    <updated>2014-07-28T20:15:44+02:00</updated>
    <id>http://crscardellino.me/blog/post/2014/07/28/from-python-to-scala-i-the-basics</id>
    <content type="html"><![CDATA[<p>This is the first post in a series in which I&rsquo;ll try to give a nice insight for
the Scala Language to a programmer with background in Python. I chose to do
these posts since, at least when I started this series, the &ldquo;Scala for people
coming from Python&rdquo; tutorial was a work in progress.</p>

<p>First of all I&rsquo;ll state some of my background (in case you didn&rsquo;t check my
<a href="http://crscardellino.me/about" title="About">about</a> page), in a kind of a
disclaimer. There are people out there who are experts in Python. I&rsquo;m not one
of them. I only have a background of 4 years in this language, and only work
with the 2.X version (started with 2.5 until 2.7). Never even try to learn
Python 3. Also, there are experts on Scala as well, I&rsquo;m not one of those
either. In fact, my Scala knowledge is far from deep, I learned Scala at the
end of last year and been using it since then (along with Python).</p>

<blockquote><p>There are people out there who are experts in Python. I&#8217;m not one of them. [&#8230;]<br/>Also, there are experts on Scala as well, I&#8217;m not one of those either.</p></blockquote>


<p>Once you know this, I&rsquo;ll just say I have enough knowledge of both Scala and
Python to get by. I&rsquo;ve done some projects in Django and some projects in Play
Framework, but nothing really impressive. The reason I&rsquo;m doing this set of
tutorials is because when I started to learn Scala I didn&rsquo;t have one and many
times I end up in Stackoverflow looking for how to do in Scala things I did in
Python.</p>

<!-- more -->


<p>For this task, I&rsquo;ll make use of the examples and general structure of the
<a href="https://docs.python.org/2/tutorial/index.html">Python Tutorial</a>, and
demonstrate how to do the same examples in Scala. Trough this tutorial I&rsquo;ll
assume you have a decent knowledge of Python (at least you read the Python
Tutorial). I&rsquo;ll also assume you&rsquo;ve already installed Scala on your machine and
get running your first &ldquo;Hello, world!&rdquo; app
(if not, please refer to the <a href="http://www.scala-lang.org/documentation/getting-started.html">Scala Getting Started</a>
section).</p>

<h4>The Scala REPL (The Python Interpreter)</h4>

<p>As Python, Scala also has an interpreter: the Scala REPL (from Read–eval–print
loop). In this mode, just as in Python&rsquo;s interpreter, you can test different
commands of Scala. Just type &ldquo;scala&rdquo; in your shell and voilà, you have your own
Scala shell:</p>

<pre><code>$ scala
Welcome to Scala version X.Y.Z (Java HotSpot(TM) 64-Bit Server VM, Java X.Y.Z).
Type in expressions to have them evaluated.
Type :help for more information.

scala&gt;
</code></pre>

<p>You can use it, for example, as a calculator, as shown with Python interpreter
in <a href="https://docs.python.org/2/tutorial/introduction.html">An Informal Introduction to Python</a>.
The main difference being in that Scala REPL will create a value (not the same
that a variable) with the name &ldquo;res&rdquo; plus a number depending on the number of
operations not assigned to any value or variable you have done so far. This
value will have an inferred type and won&rsquo;t be changeable for the rest of the
session.</p>

<pre><code>scala&gt; 2 + 2
res0: Int = 4

scala&gt; 4 + 4
res1: Int = 8

scala&gt; res0
res2: Int = 4

scala&gt; res0 = 5
&lt;console&gt;:8: error: reassignment to val
       res0 = 4
            ^
</code></pre>

<p>As you could notice in the last example, even if you try to get the value of a
res you&rsquo;ll end up creating another res (look what happens when &ldquo;res2&rdquo; is
created).</p>

<h4>Scala Strings &amp; Chars</h4>

<p>One important different when working on Scala, is the strings declaration. In
Python you can declare a String with single quotes or double quotes, for
example:</p>

<pre><code>&gt;&gt;&gt; 'spam eggs'  # single quotes
'spam eggs'
&gt;&gt;&gt; 'doesn\'t'  # use \' to escape the single quote...
"doesn't"
&gt;&gt;&gt; "doesn't"  # ...or use double quotes instead
"doesn't"
&gt;&gt;&gt; '"Yes," he said.'
'"Yes," he said.'
&gt;&gt;&gt; "\"Yes,\" he said."
'"Yes," he said.'
&gt;&gt;&gt; '"Isn\'t," she said.'
'"Isn\'t," she said.'
</code></pre>

<p>In Scala, double quotes are for strings and single quotes are for characters.
The values of type Char are actually numbers, but representative of the
characters in some codification. However, you should not use them for operations that
should go for integers, although these operations are permitted.</p>

<pre><code>scala&gt; "This is a string" // Ok
res3: String = This is a string

scala&gt; 'c' // This is a character
res4: Char = c

scala&gt; "c" // This is also a string
res5: String = c

scala&gt; 'This is error' // Wrong
&lt;console&gt;:1: error: unclosed character literal
       'This is error'
                     ^

scala&gt; "This is a " + "concatenation of strings"
res6: String = "This is a concatenation of strings"

scala&gt; 'A' + 'B' // This will produce a sum of integers of 131 ('A' = 65, 'B' = 66)
res7: Int = 131
</code></pre>

<p>Finally, the last for this session, to print, there are two built-in functions:
print() and println(). The first prints a string passed by parameter and the
second prints a string and adds an ending &ldquo;\n&rdquo; character (new line).
Both of these functions take their parameters inside parentheses:</p>

<pre><code>scala&gt; print("Hello, world!")
Hello, world!
scala&gt; println("Hello, world!")
Hello, world!

scala&gt; println "Hello, world!" // Wrong! This is not Python
&lt;console&gt;:1: error: ';' expected but string literal found.
       println "Hello, world!"
               ^
</code></pre>

<p>Ok, so, this is all for this session, very basic, nothing too complicated.
I&rsquo;ll be posting more on this crash course during the next weeks. I hope this is
useful for you and I&rsquo;ll thank all comments for feedback.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hello World!]]></title>
    <link href="http://crscardellino.me/blog/post/2014/06/11/hello-world/"/>
    <updated>2014-06-11T20:00:00+02:00</updated>
    <id>http://crscardellino.me/blog/post/2014/06/11/hello-world</id>
    <content type="html"><![CDATA[<p>As every programmer trying to learn a new language, I think is suitable for me
to start this professional blog with a Hello World. So, in this first blog post
I say Hello World!</p>

<p>This is the first blog I&rsquo;ve created that has relation with what I do for a
living. The only other surviving blog is a personal one (and is in Spanish
also).</p>

<p>The aim of this place is to write about Computer Sciences problems and
solutions I came across to overcome them, most of them of course are
programming ones.</p>

<p>As I said in my about page, I was for a long time a Python programmer, but now
I turn myself into the world of Scala and it has so interesting I&rsquo;ve
practically abandoned my old time coding Python skills (of course, with Python,
is never that hard to return).</p>

<p>I hope my posts will help you somehow.</p>
]]></content>
  </entry>
  
</feed>
